{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Jetpack Compose? Jetpack Compose is an Android\u2019s modern toolkit for building native UI rebuilt mostly from scratch by Google. You can find docs and more info about it in the official docs Jetpack Compose Playground A Jetpack Compose Example App Introduction \ud83d\ude4b\u200d\u2642\ufe0f This is an Jetpack Compose example project. I m collecting a bunch of sample codes for Widgets/Composables https://developer.android.com/jetpack/compose . You can find the samples i got from the Google AndroidX git here Please be aware that Compose is still experimental and should not be used in a production application. Show some and star the repo to support the project \ud83d\udcd9 Components Documentation avaible at: https://github.com/Foso/Jetpack-Compose-Playground/wiki How to get started? How to write a Compose function ? Get Android Context in Compose Function ? Lifecycle Lifecycle Layouts Stack Flex VerticalScroller HorizontalScroller Column Row Container Padding How to draw to canvas? GestureDetectors PressGestureDetector Draggable Clickable Material Switch Checkbox RadioGroup AlertDialog \ud83c\udfe0 Architecture \ud83d\udee0\ufe0f Built With Kotlin Project Structure You need at least Android Studio 4.1 canary 1 to build this project https://developer.android.com/studio/preview/ app - Base android project directory compose - a android library module that is using the compose libraries. It contains my example/test functions and the demo classes i copied out of the AndroidX repo ( https://android.googlesource.com/platform/frameworks/support/+/androidx-master-dev/ui/material/integration-tests/ ) Resources Content Official Documentation Other Documentation Conference talks Articles SpeakerDeck Podcasts Tutorials Extras Official Documentation Jetpack compose Jetpack compose Readme Other Documentation FAQ about Jetpack Compose \u2013 Android\u2019s modern toolkit for building native UI This Wiki Conference Talks Android Developers Backstage : Episode 131: Jetpack Compose and Declarative UIs KotlinConf 2019: The Compose Runtime, Demystified by Leland Richardson KotlinConf 2019: Compose Yourself: Designing a Kotlin First UI Toolkit by Anna-Chiara Clara What s New in Jetpack Compose (Android Dev Summit 19) Understanding Compose (Android Dev Summit 19) #AskAndroid at Android Dev Summit 2019 - Jetpack Compose Google IO19 - Declarative UI patterns DroidconBerlin - Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android DroidconBerlin - Jumping into Jetpack Compose way too early to see what s inside KotlinEverywhere - Jetpack Compose DevFest Kolkata 2019 - Let s Talk Composing UI Articles Diving into Jetpack Compose Compose From First Principles Writing Android UI Code in Jetpack Compose (1 of 2) Jetpack Compose: Optimism and Opportunity Android Jetpack Compose Review SwiftUI vs. Jetpack Compose Android Jetpack Compose First Impression SpeakerDeck Jetpack @Compose Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android Shifting Paradigms Podcasts Android Developer backstage - Episode 115: Jetpack Compose Fragmented Podcast - Episode 171: Jetpack Compose with Leland Richardson Google podcast - Romain Guy \u2013 Podcast S09 E09 Tutorials Raywenderlich - Jetpack Compose Primer Extras Video - Kotlin and Jetpack Compose #compose channel on Kotlin Slack Feel free to contribute! What is Jetpack Compose Links: * Jetpack Compose Tutorial Compose Readme Compose from first Principles \u270d\ufe0f Feedback If you want to improve Compose, join the Kotlin Slack and the #compose channel or file a bug at https://issuetracker.google.com/issues?q=componentid:612128 \ud83d\udcdc License This project is licensed under the MIT License - see the LICENSE.md file for details Find this project useful ? Support it by clicking the button on the upper right of this page. License ``` MIT License Copyright 2019 Jens Klingenberg Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ``` Acknowledgments Projects that helped me understand how to setup the project: * Mishkun/try-compose","title":"Overview"},{"location":"#what-is-jetpack-compose","text":"Jetpack Compose is an Android\u2019s modern toolkit for building native UI rebuilt mostly from scratch by Google. You can find docs and more info about it in the official docs","title":"What is Jetpack Compose?"},{"location":"#introduction","text":"This is an Jetpack Compose example project. I m collecting a bunch of sample codes for Widgets/Composables https://developer.android.com/jetpack/compose . You can find the samples i got from the Google AndroidX git here Please be aware that Compose is still experimental and should not be used in a production application.","title":"Introduction \ud83d\ude4b\u200d\u2642\ufe0f"},{"location":"#show-some-and-star-the-repo-to-support-the-project","text":"","title":"Show some  and star the repo to support the project"},{"location":"#components","text":"Documentation avaible at: https://github.com/Foso/Jetpack-Compose-Playground/wiki","title":"\ud83d\udcd9 Components"},{"location":"#how-to-get-started","text":"How to write a Compose function ? Get Android Context in Compose Function ?","title":"How to get started?"},{"location":"#lifecycle","text":"Lifecycle","title":"Lifecycle"},{"location":"#layouts","text":"Stack Flex VerticalScroller HorizontalScroller Column Row Container Padding How to draw to canvas?","title":"Layouts"},{"location":"#gesturedetectors","text":"PressGestureDetector Draggable Clickable","title":"GestureDetectors"},{"location":"#material","text":"Switch Checkbox RadioGroup AlertDialog","title":"Material"},{"location":"#architecture","text":"","title":"\ud83c\udfe0 Architecture"},{"location":"#built-with","text":"","title":"\ud83d\udee0\ufe0f Built With"},{"location":"#kotlin","text":"","title":"Kotlin"},{"location":"#project-structure","text":"You need at least Android Studio 4.1 canary 1 to build this project https://developer.android.com/studio/preview/ app - Base android project directory compose - a android library module that is using the compose libraries. It contains my example/test functions and the demo classes i copied out of the AndroidX repo ( https://android.googlesource.com/platform/frameworks/support/+/androidx-master-dev/ui/material/integration-tests/ )","title":"Project Structure"},{"location":"#resources","text":"","title":"Resources"},{"location":"#content","text":"Official Documentation Other Documentation Conference talks Articles SpeakerDeck Podcasts Tutorials Extras","title":"Content"},{"location":"#official-documentation","text":"Jetpack compose Jetpack compose Readme","title":"Official Documentation"},{"location":"#other-documentation","text":"FAQ about Jetpack Compose \u2013 Android\u2019s modern toolkit for building native UI This Wiki","title":"Other Documentation"},{"location":"#conference-talks","text":"Android Developers Backstage : Episode 131: Jetpack Compose and Declarative UIs KotlinConf 2019: The Compose Runtime, Demystified by Leland Richardson KotlinConf 2019: Compose Yourself: Designing a Kotlin First UI Toolkit by Anna-Chiara Clara What s New in Jetpack Compose (Android Dev Summit 19) Understanding Compose (Android Dev Summit 19) #AskAndroid at Android Dev Summit 2019 - Jetpack Compose Google IO19 - Declarative UI patterns DroidconBerlin - Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android DroidconBerlin - Jumping into Jetpack Compose way too early to see what s inside KotlinEverywhere - Jetpack Compose DevFest Kolkata 2019 - Let s Talk Composing UI","title":"Conference Talks"},{"location":"#articles","text":"Diving into Jetpack Compose Compose From First Principles Writing Android UI Code in Jetpack Compose (1 of 2) Jetpack Compose: Optimism and Opportunity Android Jetpack Compose Review SwiftUI vs. Jetpack Compose Android Jetpack Compose First Impression","title":"Articles"},{"location":"#speakerdeck","text":"Jetpack @Compose Jetpack Compose \u2014 Next Gen Kotlin UI Toolkit for Android Shifting Paradigms","title":"SpeakerDeck"},{"location":"#podcasts","text":"Android Developer backstage - Episode 115: Jetpack Compose Fragmented Podcast - Episode 171: Jetpack Compose with Leland Richardson Google podcast - Romain Guy \u2013 Podcast S09 E09","title":"Podcasts"},{"location":"#tutorials","text":"Raywenderlich - Jetpack Compose Primer","title":"Tutorials"},{"location":"#extras","text":"Video - Kotlin and Jetpack Compose #compose channel on Kotlin Slack Feel free to contribute!","title":"Extras"},{"location":"#what-is-jetpack-compose_1","text":"Links: * Jetpack Compose Tutorial Compose Readme Compose from first Principles","title":"What is Jetpack Compose"},{"location":"#feedback","text":"If you want to improve Compose, join the Kotlin Slack and the #compose channel or file a bug at https://issuetracker.google.com/issues?q=componentid:612128","title":"\u270d\ufe0f Feedback"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details","title":"\ud83d\udcdc License"},{"location":"#find-this-project-useful","text":"Support it by clicking the button on the upper right of this page.","title":"Find this project useful ?"},{"location":"#license_1","text":"``` MIT License Copyright 2019 Jens Klingenberg Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ```","title":"License"},{"location":"#acknowledgments","text":"Projects that helped me understand how to setup the project: * Mishkun/try-compose","title":"Acknowledgments"},{"location":"CHANGELOG/","text":"v0.8.4 Build with Kotlin bbbbbb1.3.70 Fixed bug that produced a crash when annotating functions with expression body like fun functionWithExpressionBody() = 1 + 1 on Native (thx to @chippmann) Removed SyntheticResolveExtensionImpl, you don t need add: SyntheticResolveExtension.registerExtension(project, mpapt) anymore v0.8.3 You can now detect annotated expressions in functions Added util method printMessage() Added an extension function to the MessageCollector that can be used to print text or raise compiler errors. Inside your processor, you can use it like that: configuration . messager (). printMessage ( DiagnosticKind . ERROR , My error message , CompilerMessageLocation . Companion . create ( /home/jens/Code/2019/MpApt/kotlin-plugin-shared/src/main/java/de/jensklingenberg/MpAptTestProcessor.kt , 42 , 106 )) This will print the message to the log and stop the compiler: e : / home / jens / Code / 2019 / MpApt / kotlin - plugin - shared / src / main / java / de / jensklingenberg / MpAptTestProcessor . kt : ( 42 , 106 ): My error message v0.8.2 fixed that processingOver was called to often You can now detect annotation with Target (ANNOTATION_CLASS,TYPE_PARAMETER,FIELD,FILE,LocalVariable) v0.8.1 ======================================== You can now distinguish between which native target platforms you want to support. Before processing the isTargetPlatformSupported(platform: TargetPlatform) will be called and you can return true if you want to enable your processor for this target or false if you don t. By default this methods returns true configuration.nativeTargetPlatformName() will get you the names of the Native Targets(macos_x64,linux_x64,etc) the values are defined in KonanTargetValues. It needs to be used only on Kotlin Native otherwise it will return an empty string Example: override fun isTargetPlatformSupported ( platform : TargetPlatform ): Boolean { val targetName = platform . first (). platformName return when ( targetName ) { KotlinPlatformValues . JS - false KotlinPlatformValues . JVM - true KotlinPlatformValues . NATIVE - { return when ( configuration . nativeTargetPlatformName ()) { KonanTargetValues . LINUX_X64 , KonanTargetValues . MACOS_X64 - { false } else - { false } } } else - { log ( targetName ) false } } } ======================================== Changed the initialization of the library. Now you need to add the compiler configuration to the MpAptProject val processor = MpAptTestProcessor () val mpapt = MpAptProject ( processor , configuration )","title":"CHANGELOG"},{"location":"CHANGELOG/#v084","text":"Build with Kotlin bbbbbb1.3.70 Fixed bug that produced a crash when annotating functions with expression body like fun functionWithExpressionBody() = 1 + 1 on Native (thx to @chippmann) Removed SyntheticResolveExtensionImpl, you don t need add: SyntheticResolveExtension.registerExtension(project, mpapt) anymore","title":"v0.8.4"},{"location":"CHANGELOG/#v083","text":"You can now detect annotated expressions in functions Added util method printMessage() Added an extension function to the MessageCollector that can be used to print text or raise compiler errors. Inside your processor, you can use it like that: configuration . messager (). printMessage ( DiagnosticKind . ERROR , My error message , CompilerMessageLocation . Companion . create ( /home/jens/Code/2019/MpApt/kotlin-plugin-shared/src/main/java/de/jensklingenberg/MpAptTestProcessor.kt , 42 , 106 )) This will print the message to the log and stop the compiler: e : / home / jens / Code / 2019 / MpApt / kotlin - plugin - shared / src / main / java / de / jensklingenberg / MpAptTestProcessor . kt : ( 42 , 106 ): My error message","title":"v0.8.3"},{"location":"CHANGELOG/#v082","text":"fixed that processingOver was called to often You can now detect annotation with Target (ANNOTATION_CLASS,TYPE_PARAMETER,FIELD,FILE,LocalVariable) v0.8.1 ======================================== You can now distinguish between which native target platforms you want to support. Before processing the isTargetPlatformSupported(platform: TargetPlatform) will be called and you can return true if you want to enable your processor for this target or false if you don t. By default this methods returns true configuration.nativeTargetPlatformName() will get you the names of the Native Targets(macos_x64,linux_x64,etc) the values are defined in KonanTargetValues. It needs to be used only on Kotlin Native otherwise it will return an empty string Example: override fun isTargetPlatformSupported ( platform : TargetPlatform ): Boolean { val targetName = platform . first (). platformName return when ( targetName ) { KotlinPlatformValues . JS - false KotlinPlatformValues . JVM - true KotlinPlatformValues . NATIVE - { return when ( configuration . nativeTargetPlatformName ()) { KonanTargetValues . LINUX_X64 , KonanTargetValues . MACOS_X64 - { false } else - { false } } } else - { log ( targetName ) false } } } ======================================== Changed the initialization of the library. Now you need to add the compiler configuration to the MpAptProject val processor = MpAptTestProcessor () val mpapt = MpAptProject ( processor , configuration )","title":"v0.8.2"},{"location":"test/","text":"Hallo","title":"Test"},{"location":"wiki/get_android_context/","text":"Info This the api of version dev04. Newer versions may have a different one You can use ambient(ContextAmbient) to receive the context of your Android App inside a Compose Function @Composable fun AndroidContextComposeDemo () { MaterialTheme { val context = ambient ( ContextAmbient ) Text ( text = Read this string from Context: + context . getString ( R . string . app_name )) } }","title":"How to get Android Context"},{"location":"wiki/resources/","text":"Resources AndroidX Git Compose: https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/ Compse UI Docu: https://developer.android.com/reference/kotlin/androidx/ui/packages","title":"Resources"},{"location":"wiki/resources/#resources","text":"AndroidX Git Compose: https://android.googlesource.com/platform/frameworks/support/+/refs/heads/androidx-master-dev/compose/ Compse UI Docu: https://developer.android.com/reference/kotlin/androidx/ui/packages","title":"Resources"},{"location":"wiki/Layout/Column/","text":"Column @Composable /** * @see wiki [https://github.com/Foso/Jetpack-Compose-Playground/wiki/Column] */ fun ColumnDemo () { CraneWrapper { MaterialTheme { ColumnExample () } } } @Composable fun ColumnExample () { Column { Text ( text = Hello World! , style = + themeTextStyle { body1 }) Text ( text = Hello World!2 , style = + themeTextStyle { body1 }) } } View Source","title":"Column"},{"location":"wiki/Layout/Column/#column","text":"@Composable /** * @see wiki [https://github.com/Foso/Jetpack-Compose-Playground/wiki/Column] */ fun ColumnDemo () { CraneWrapper { MaterialTheme { ColumnExample () } } } @Composable fun ColumnExample () { Column { Text ( text = Hello World! , style = + themeTextStyle { body1 }) Text ( text = Hello World!2 , style = + themeTextStyle { body1 }) } } View Source","title":"Column"},{"location":"wiki/Layout/row/","text":"Row @Composable /** * @see wiki [https://github.com/Foso/Jetpack-Compose-Playground/wiki/Row] */ fun RowDemo () { MaterialTheme { RowExample () } } @Composable fun RowExample () { Row { Text ( text = Hello World! ) Text ( text = Hello World!2 ) } }","title":"Row"},{"location":"wiki/Layout/row/#row","text":"@Composable /** * @see wiki [https://github.com/Foso/Jetpack-Compose-Playground/wiki/Row] */ fun RowDemo () { MaterialTheme { RowExample () } } @Composable fun RowExample () { Row { Text ( text = Hello World! ) Text ( text = Hello World!2 ) } }","title":"Row"},{"location":"wiki/core/pressgesturedetector/","text":"You can use a PressGestureDetector to detect when a compose element gets pressed and released. @Composable fun PressGestureDetectorDemo () { val posX = + state { 0f } val posXY = + state { 0f } val clickState = + state { } PressGestureDetector ( onPress = { position - posX . value = position . x . value posXY . value = position . y . value clickState . value = Pressed }, onRelease = { clickState . value = Released }) { Column { Text ( ClickState: + clickState . value ) Text ( PostitionX: ${posX.value} ) Text ( PostitionY: ${posXY.value} ) } } }","title":"PressGestureDetector"},{"location":"wiki/foundation/clickable/","text":"Clickable Info This the api of version dev04. Newer versions may have a different one Childrens of Clickable will become clickable https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#clickable @Composable fun ClickableSample () { val count = state { 0 } Clickable ( onClick = { count . value += 1 }) { // content that you want to make clickable Text ( text = You have clicked this text: + count . value . toString ()) } }","title":"Clickable"},{"location":"wiki/foundation/clickable/#clickable","text":"Info This the api of version dev04. Newer versions may have a different one Childrens of Clickable will become clickable https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#clickable @Composable fun ClickableSample () { val count = state { 0 } Clickable ( onClick = { count . value += 1 }) { // content that you want to make clickable Text ( text = You have clicked this text: + count . value . toString ()) } }","title":"Clickable"},{"location":"wiki/foundation/draggable/","text":"Draggable https://developer.android.com/reference/kotlin/androidx/ui/foundation/gestures/package-summary#draggable @Composable fun DraggableDemo (){ val max = 300. dp val min = 0. dp val ( minPx , maxPx ) = withDensity ( ambientDensity ()) { min . toPx (). value to max . toPx (). value } val position = animatedDragValue ( 0f , minPx , maxPx ) Draggable ( DragDirection . Horizontal , position ,{ position . animatedFloat . snapTo ( it ) }) { // dragValue is the current value in progress of dragging val draggedDp = withDensity ( ambientDensity ()) { position . value . toDp () } Column { Padding ( left = draggedDp ){ Text ( Drag me ) } Text ( Dragvalue: + position . value . dp ) } } }","title":"Draggable"},{"location":"wiki/foundation/draggable/#draggable","text":"https://developer.android.com/reference/kotlin/androidx/ui/foundation/gestures/package-summary#draggable @Composable fun DraggableDemo (){ val max = 300. dp val min = 0. dp val ( minPx , maxPx ) = withDensity ( ambientDensity ()) { min . toPx (). value to max . toPx (). value } val position = animatedDragValue ( 0f , minPx , maxPx ) Draggable ( DragDirection . Horizontal , position ,{ position . animatedFloat . snapTo ( it ) }) { // dragValue is the current value in progress of dragging val draggedDp = withDensity ( ambientDensity ()) { position . value . toDp () } Column { Padding ( left = draggedDp ){ Text ( Drag me ) } Text ( Dragvalue: + position . value . dp ) } } }","title":"Draggable"},{"location":"wiki/foundation/horizontal_scroller/","text":"HorizontalScroller When an app has layout content that might be longer than the width of the device and that content should be horizontal scrollable, then we need to use a HorizontalScroller. It is the horizontal equivalent of VerticalScroller @Composable /** * @see wiki [https://github.com/Foso/Jetpack-Compose-Playground/wiki/HorizontalScroller] */ fun HorizontalScrollerDemo () { MaterialTheme { FlexColumn { HorizontalScrollerExample () } } } @Composable fun HorizontalScrollerExample () { HorizontalScroller { //Only one child is allowed in a HorizontalScroller Row { for ( i in 0. . 100 ) { Text ( text = $i Hello World! , style = + themeTextStyle { body1 }) } } } }","title":"HorizontalScroller"},{"location":"wiki/foundation/horizontal_scroller/#horizontalscroller","text":"When an app has layout content that might be longer than the width of the device and that content should be horizontal scrollable, then we need to use a HorizontalScroller. It is the horizontal equivalent of VerticalScroller @Composable /** * @see wiki [https://github.com/Foso/Jetpack-Compose-Playground/wiki/HorizontalScroller] */ fun HorizontalScrollerDemo () { MaterialTheme { FlexColumn { HorizontalScrollerExample () } } } @Composable fun HorizontalScrollerExample () { HorizontalScroller { //Only one child is allowed in a HorizontalScroller Row { for ( i in 0. . 100 ) { Text ( text = $i Hello World! , style = + themeTextStyle { body1 }) } } } }","title":"HorizontalScroller"},{"location":"wiki/foundation/vertical_scroller/","text":"VerticalScroller Info This the api of version dev04. Newer versions may have a different one https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#verticalscroller When an app has layout content that might be longer than the height of the device and that content should be vertically scrollable, then we need to use a VerticalScroller. Your browser does not support the video tag. /** * A container that composes all of its contents and lays it out, fitting the width of the child. * If the child s height is less than the [Constraints.maxHeight], the child s height is used, * or the [Constraints.maxHeight] otherwise. If the contents don t fit the height, the drag gesture * allows scrolling its content vertically. The contents of the VerticalScroller are clipped to * the VerticalScroller s bounds. */ @Composable /** * @see wiki [https://github.com/Foso/Jetpack-Compose-Playground/wiki/VerticalScroller] */ fun VerticalScrollerDemo () { MaterialTheme { VerticalScrollerExample () } } @Composable fun VerticalScrollerExample () { VerticalScroller { //Only one child is allowed in a VerticalScroller Column { for ( i in 0. . 60 ) { Text ( text = Hello World! ) } } } } Note that a VerticalScroller can only contain a single child element so if you need multiple things to be scrollable, you need to wrap that content into a layout as shown above.","title":"VerticalScroller"},{"location":"wiki/foundation/vertical_scroller/#verticalscroller","text":"Info This the api of version dev04. Newer versions may have a different one https://developer.android.com/reference/kotlin/androidx/ui/foundation/package-summary#verticalscroller When an app has layout content that might be longer than the height of the device and that content should be vertically scrollable, then we need to use a VerticalScroller. Your browser does not support the video tag. /** * A container that composes all of its contents and lays it out, fitting the width of the child. * If the child s height is less than the [Constraints.maxHeight], the child s height is used, * or the [Constraints.maxHeight] otherwise. If the contents don t fit the height, the drag gesture * allows scrolling its content vertically. The contents of the VerticalScroller are clipped to * the VerticalScroller s bounds. */ @Composable /** * @see wiki [https://github.com/Foso/Jetpack-Compose-Playground/wiki/VerticalScroller] */ fun VerticalScrollerDemo () { MaterialTheme { VerticalScrollerExample () } } @Composable fun VerticalScrollerExample () { VerticalScroller { //Only one child is allowed in a VerticalScroller Column { for ( i in 0. . 60 ) { Text ( text = Hello World! ) } } } } Note that a VerticalScroller can only contain a single child element so if you need multiple things to be scrollable, you need to wrap that content into a layout as shown above.","title":"VerticalScroller"},{"location":"wiki/general/compose_lifecycle/","text":"Info This the api of version dev04. Newer versions may have a different one Compose has some effects -function that can be used in compose function to track the lifecycle of a function. onActive {} willl be called the first time a compose function is applied. onDispose { } will be called when the compose function isn t part of the composition anymore. The example below has a Button that will count up everytime it gets clicked. When the count value gets 3, the Text() function will not be added anymore. The first time the LifecycleDemo will be executed, the +onActive{} in the if-clause will be executed. When the count value gets 3 +onDispose{} inside the if-clause will be called. @Composable fun LifecycleDemo () { MaterialTheme { val count = state { 0 } Column { Button ( text = Click me , onClick = { count . value ++ }) if ( count . value 3 ) { onActive { Log . d ( Compose , onactive with value: + count . value ) } onDispose { Log . d ( Compose , onDispose because value= + count . value ) } Text ( text = You have clicked the button: + count . value . toString ()) } } } }","title":"Compose Lifecycle"},{"location":"wiki/general/draw_on_canvas/","text":"@Composable fun CanvasDrawExample () { MaterialTheme { Container ( height = 60. dp , expanded = true ) { val paint = Paint () Draw { canvas , parentSize - val centerY = 0f // draw rect paint . color = Color . Blue canvas . drawRect ( Rect ( 0f , centerY + 10 , parentSize . width . value , 55f ), paint ) // draw circle canvas . drawCircle ( Offset ( 50f , 200f ), 40f , paint ) //Draw a line paint . color = Color . Red paint . strokeWidth = 5f canvas . drawLine ( Offset ( 20f , 0f ), Offset ( 200f , 200f ), paint ) } } } }","title":"How to draw on Canvas"},{"location":"wiki/general/helloworld/","text":"Hello World Compose Write a simple Compose function A basic Compose View is using a normal Kotlin function which is annotated with @Composable @Composable fun HelloWorld () { Text ( text = Hello World! ) } Use a Compose function as a view in your android app To use the HelloWorld() function in your App you have to use the setContent() extension function inside a onCreate() in an Activity. class MainActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContent { HelloWorld () } } }","title":"Hello World Compose"},{"location":"wiki/general/helloworld/#hello-world-compose","text":"","title":"Hello World Compose"},{"location":"wiki/general/helloworld/#write-a-simple-compose-function","text":"A basic Compose View is using a normal Kotlin function which is annotated with @Composable @Composable fun HelloWorld () { Text ( text = Hello World! ) }","title":"Write a simple Compose function"},{"location":"wiki/general/helloworld/#use-a-compose-function-as-a-view-in-your-android-app","text":"To use the HelloWorld() function in your App you have to use the setContent() extension function inside a onCreate() in an Activity. class MainActivity : AppCompatActivity () { override fun onCreate ( savedInstanceState : Bundle ?) { super . onCreate ( savedInstanceState ) setContent { HelloWorld () } } }","title":"Use a Compose function as a view in your android app"},{"location":"wiki/material/alertdialog/","text":"Info This the api of version dev04. Newer versions may have a different one @Composable fun AlertDialogSample () { MaterialTheme { Column { val openDialog = + state { false } Button ( Click me , onClick = { openDialog . value = true }) if ( openDialog . value ) { AlertDialog ( onCloseRequest = { openDialog . value = false }, title = { Text ( text = Dialog Title ) }, text = { Text ( Here is a text ) }, confirmButton = { Button ( This is the Confirm Button , onClick = { openDialog . value = false }) }, dismissButton = { Button ( This is the dismiss Button , onClick = { openDialog . value = false }) }, buttonLayout = AlertDialogButtonLayout . Stacked ) } } } }","title":"AlertDialog"},{"location":"wiki/material/checkbox/","text":"Info This the api of version dev04. Newer versions may have a different one @Composable fun CheckBoxDemo () { MaterialTheme { val checkedState = + state { true } Checkbox ( checked = checkedState . value , onCheckedChange = { checkedState . value = it } ) } }","title":"Checkbox"},{"location":"wiki/material/radiogroup/","text":"Info This the api of version dev04. Newer versions may have a different one @Composable fun RadioGroupSample () { MaterialTheme { val radioOptions = listOf ( A , B , C ) val ( selectedOption , onOptionSelected ) = + state { radioOptions [ 0 ] } RadioGroup ( options = radioOptions , selectedOption = selectedOption , onSelectedChange = onOptionSelected ) } }","title":"RadioGroup"},{"location":"wiki/material/switch/","text":"Info This the api of version dev04. Newer versions may have a different one @Composable fun SwitchDemo () { MaterialTheme { val checkedState = + state { true } Switch ( checked = checkedState . value , onCheckedChange = { checkedState . value = it } ) } }","title":"Switch"}]}